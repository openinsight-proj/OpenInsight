syntax = "proto3";

package tracing.v1alpha1;

import "opentelemetry/proto/trace/v1/trace.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";

option go_package = "tracing/v1alpha1";
option java_package = "com.github.openinsight";

// Request object to get a trace.
message GetTraceRequest {
  // Hex encoded 64 or 128 bit trace ID.
  string trace_id = 1;
}

// Response object with spans.
message SpansResponseChunk {
  // A list of OpenTelemetry ResourceSpans.
  // In case of JSON format the ids (trace_id, span_id, parent_id) are encoded in base64 even though OpenTelemetry specification
  // mandates to use hex encoding [2].
  // Base64 is chosen to keep compatibility with JSONPb codec.
  // [1]: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
  // [2]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp
  repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
}

// Query parameters to find traces.
// Note that some storage implementations do not guarantee the correct implementation of all parameters.
message TraceQueryParameters {
  string service_name = 1;
  string operation_name = 2;
  // Attributes are matched against Span and Resource attributes.
  // At least one span in a trace must match all specified attributes.
  map<string, string> attributes = 3;
  // Span min start time in. REST API uses RFC-3339ns format. Required.
  google.protobuf.Timestamp start_time = 4;
  // Span max start time. REST API uses RFC-3339ns format. Required.
  google.protobuf.Timestamp end_time = 5;
  // Span min duration. REST API uses Golang's time format e.g. 10s.
  google.protobuf.Duration duration_min = 6;
  // Span max duration. REST API uses Golang's time format e.g. 10s.
  google.protobuf.Duration duration_max = 7;
  // Maximum number of traces in the response.
  int32 num_traces = 8;
}

// Request object to search traces.
message FindTracesRequest {
  TraceQueryParameters query = 1;
}

// Request object to get service names.
message GetServicesRequest {}

// Response object to get service names.
message GetServicesResponse {
  repeated string services = 1;
}

// Request object to get operation names.
message GetOperationsRequest {
  // Required service name.
  string service = 1;
  // Optional span kind.
  string span_kind = 2;
}

// Operation encapsulates information about operation.
message Operation {
  string name = 1;
  string span_kind = 2;
}

// Response object to get operation names.
message GetOperationsResponse {
  repeated Operation operations = 1;
}

service QueryService {
  // GetTrace returns a single trace.
  // Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
  // It means that the JSON response cannot be directly unmarshalled using JSONPb.
  // This can be fixed by first parsing into user-defined envelope with standard JSON library
  // or string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.
  rpc GetTrace(GetTraceRequest) returns (opentelemetry.proto.trace.v1.TracesData) {
    option (google.api.http) = {
      get:"/apis/tracing/v1alpha1/trace/{trace_id}"
    };
  }

  // FindTraces searches for traces.
  // See GetTrace for JSON unmarshalling.
  rpc FindTraces(FindTracesRequest) returns (opentelemetry.proto.trace.v1.TracesData) {
    option (google.api.http) = {
      get:"/apis/tracing/v1alpha1/trace"
    };
  }

  // GetServices returns service names.
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {
    option (google.api.http) = {
      get:"/apis/tracing/v1alpha1/services"
    };
  }

  // GetOperations returns operation names.
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {
    option (google.api.http) = {
      get:"/apis/tracing/v1alpha1/operations"
    };
  }
}
