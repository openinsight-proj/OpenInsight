{
  "swagger": "2.0",
  "info": {
    "title": "tracing/v1alpha1/query_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "QueryService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/logs/v1alpha1/logging": {
      "get": {
        "summary": "SearchTraces searches for traces.\nSee GetTrace for JSON unmarshalling.",
        "operationId": "QueryService_SearchLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogsData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "QueryService"
        ]
      }
    },
    "/apis/traces/v1alpha1/operations": {
      "get": {
        "summary": "GetOperations returns operation names.",
        "operationId": "QueryService_GetOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetOperationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "description": "Required service name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spanKind",
            "description": "Optional span kind.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/apis/traces/v1alpha1/services": {
      "get": {
        "summary": "GetServices returns service names.",
        "operationId": "QueryService_GetServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "QueryService"
        ]
      }
    },
    "/apis/traces/v1alpha1/trace": {
      "get": {
        "summary": "SearchTraces searches for traces.\nSee GetTrace for JSON unmarshalling.",
        "operationId": "QueryService_SearchTraces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TracesData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.serviceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.operationName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.startTime",
            "description": "Span min start time in. REST API uses RFC-3339ns format. Required.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "query.endTime",
            "description": "Span max start time. REST API uses RFC-3339ns format. Required.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "query.durationMin",
            "description": "Span min duration. REST API uses Golang's time format e.g. 10s.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.durationMax",
            "description": "Span max duration. REST API uses Golang's time format e.g. 10s.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.numTraces",
            "description": "Maximum number of traces in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/apis/traces/v1alpha1/trace/{traceId}": {
      "get": {
        "summary": "GetTrace returns a single trace.\nNote that the JSON response over HTTP is wrapped into result envelope \"{\"result\": ...}\"\nIt means that the JSON response cannot be directly unmarshalled using JSONPb.\nThis can be fixed by first parsing into user-defined envelope with standard JSON library\nor string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.",
        "operationId": "QueryService_GetTrace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TracesData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "traceId",
            "description": "Hex encoded 64 or 128 bit trace ID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    }
  },
  "definitions": {
    "SpanEvent": {
      "type": "object",
      "properties": {
        "timeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "time_unix_nano is the time the event occurred."
        },
        "name": {
          "type": "string",
          "description": "name of the event.\nThis field is semantically required to be set to non-empty string."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "attributes is a collection of attribute key/value pairs on the event.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped."
        }
      },
      "description": "Event is a time-stamped annotation of the span, consisting of user-supplied\ntext description and key-value pairs."
    },
    "SpanLink": {
      "type": "object",
      "properties": {
        "traceId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier of a trace that this linked span is part of. The ID is a\n16-byte array."
        },
        "spanId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for the linked span. The ID is an 8-byte array."
        },
        "traceState": {
          "type": "string",
          "description": "The trace_state associated with the link."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "attributes is a collection of attribute key/value pairs on the link.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped."
        }
      },
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project."
    },
    "SpanSpanKind": {
      "type": "string",
      "enum": [
        "SPAN_KIND_UNSPECIFIED",
        "SPAN_KIND_INTERNAL",
        "SPAN_KIND_SERVER",
        "SPAN_KIND_CLIENT",
        "SPAN_KIND_PRODUCER",
        "SPAN_KIND_CONSUMER"
      ],
      "default": "SPAN_KIND_UNSPECIFIED",
      "description": "SpanKind is the type of span. Can be used to specify additional relationships between spans\nin addition to a parent/child relationship.\n\n - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default.\nImplementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.\n - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,\nas opposed to an operation happening at the boundaries. Default value.\n - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other\nremote network request.\n - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.\n - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.\nUnlike CLIENT and SERVER, there is often no direct critical path latency relationship\nbetween producer and consumer spans. A PRODUCER span ends when the message was accepted\nby the broker while the logical processing of the message might span a much longer time.\n - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.\nLike the PRODUCER kind, there is often no direct critical path latency relationship\nbetween producer and consumer spans."
    },
    "StatusStatusCode": {
      "type": "string",
      "enum": [
        "STATUS_CODE_UNSET",
        "STATUS_CODE_OK",
        "STATUS_CODE_ERROR"
      ],
      "default": "STATUS_CODE_UNSET",
      "description": "- STATUS_CODE_UNSET: The default status.\n - STATUS_CODE_OK: The Span has been validated by an Application developer or Operator to \nhave completed successfully.\n - STATUS_CODE_ERROR: The Span contains an error.",
      "title": "For the semantics of status codes see\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "tracev1Status": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing human readable error message."
        },
        "code": {
          "$ref": "#/definitions/StatusStatusCode",
          "description": "The status code."
        }
      },
      "description": "The Status type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs."
    },
    "v1AnyValue": {
      "type": "object",
      "properties": {
        "stringValue": {
          "type": "string"
        },
        "boolValue": {
          "type": "boolean"
        },
        "intValue": {
          "type": "string",
          "format": "int64"
        },
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "arrayValue": {
          "$ref": "#/definitions/v1ArrayValue"
        },
        "kvlistValue": {
          "$ref": "#/definitions/v1KeyValueList"
        },
        "bytesValue": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a\nprimitive value such as a string or integer or it may contain an arbitrary nested\nobject containing arrays, key-value lists and primitives."
    },
    "v1ArrayValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AnyValue"
          },
          "description": "Array of values. The array may be empty (contain 0 elements)."
        }
      },
      "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\nsince oneof in AnyValue does not allow repeated fields."
    },
    "v1InstrumentationScope": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "An empty instrumentation scope name means the name is unknown."
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "InstrumentationScope is a message representing the instrumentation scope information\nsuch as the fully qualified name and version."
    },
    "v1KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/v1AnyValue"
        }
      },
      "description": "KeyValue is a key-value pair that is used to store Span attributes, Link\nattributes, etc."
    },
    "v1KeyValueList": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may\ncontain 0 elements).\nThe keys MUST be unique (it is not allowed to have more than one\nvalue with the same key)."
        }
      },
      "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\nsince `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\na list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\navoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\nare semantically equivalent."
    },
    "v1LogRecord": {
      "type": "object",
      "properties": {
        "timeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "time_unix_nano is the time when the event occurred.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\nValue of 0 indicates unknown or missing timestamp."
        },
        "observedTimeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "Time when the event was observed by the collection system.\nFor events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)\nthis timestamp is typically set at the generation time and is equal to Timestamp.\nFor events originating externally and collected by OpenTelemetry (e.g. using\nCollector) this is the time when OpenTelemetry's code observed the event measured\nby the clock of the OpenTelemetry code. This field MUST be set once the event is\nobserved by OpenTelemetry.\n\nFor converting OpenTelemetry log data to formats that support only one timestamp or\nwhen receiving OpenTelemetry log data by recipients that support only one timestamp\ninternally the following logic is recommended:\n  - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.\n\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\nValue of 0 indicates unknown or missing timestamp."
        },
        "severityNumber": {
          "$ref": "#/definitions/v1SeverityNumber",
          "description": "Numerical value of the severity, normalized to values described in Log Data Model.\n[Optional]."
        },
        "severityText": {
          "type": "string",
          "description": "The severity text (also known as log level). The original string representation as\nit is known at the source. [Optional]."
        },
        "body": {
          "$ref": "#/definitions/v1AnyValue",
          "description": "A value containing the body of the log record. Can be for example a human-readable\nstring message (including multi-line) describing the event in a free form or it can\nbe a structured data composed of arrays and maps of other values. [Optional]."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "Additional attributes that describe the specific event occurrence. [Optional].\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64"
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "description": "Flags, a bit field. 8 least significant bits are the trace flags as\ndefined in W3C Trace Context specification. 24 most significant bits are reserved\nand must be set to 0. Readers must not assume that 24 most significant bits\nwill be zero and must correctly mask the bits when reading 8-bit trace flag (use\nflags \u0026 TRACE_FLAGS_MASK). [Optional]."
        },
        "traceId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All logs from the same trace share\nthe same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\nis considered invalid. Can be set for logs that are part of request processing\nand have an assigned trace id. [Optional]."
        },
        "spanId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array. An ID with all zeroes is considered\ninvalid. Can be set for logs that are part of a particular processing span.\nIf span_id is present trace_id SHOULD be also present. [Optional]."
        }
      },
      "title": "A log record according to OpenTelemetry Log Data Model:\nhttps://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md"
    },
    "v1LogsData": {
      "type": "object",
      "properties": {
        "resourceLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceLogs"
          },
          "description": "An array of ResourceLogs.\nFor data coming from a single resource this array will typically contain\none element. Intermediary nodes that receive data from multiple origins\ntypically batch the data before forwarding further and in that case this\narray will contain multiple elements."
        }
      },
      "description": "LogsData represents the logs data that can be stored in a persistent storage,\nOR can be embedded by other protocols that transfer OTLP logs data but do not\nimplement the OTLP protocol.\n\nThe main difference between this message and collector protocol is that\nin this message there will not be any \"control\" or \"metadata\" specific to\nOTLP protocol.\n\nWhen new fields are added into this message, the OTLP request MUST be updated\nas well."
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "Set of attributes that describe the resource.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then\nno attributes were dropped."
        }
      },
      "description": "Resource information."
    },
    "v1ResourceLogs": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1Resource",
          "description": "The resource for the logs in this message.\nIf this field is not set then resource info is unknown."
        },
        "scopeLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ScopeLogs"
          },
          "description": "A list of ScopeLogs that originate from a resource."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to the data in the \"resource\" field. It does not apply\nto the data in the \"scope_logs\" field which have their own schema_url field."
        }
      },
      "description": "A collection of ScopeLogs from a Resource."
    },
    "v1ResourceSpans": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1Resource",
          "description": "The resource for the spans in this message.\nIf this field is not set then no resource info is known."
        },
        "scopeSpans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ScopeSpans"
          },
          "description": "A list of ScopeSpans that originate from a resource."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to the data in the \"resource\" field. It does not apply\nto the data in the \"scope_spans\" field which have their own schema_url field."
        }
      },
      "description": "A collection of ScopeSpans from a Resource."
    },
    "v1ScopeLogs": {
      "type": "object",
      "properties": {
        "scope": {
          "$ref": "#/definitions/v1InstrumentationScope",
          "description": "The instrumentation scope information for the logs in this message.\nSemantically when InstrumentationScope isn't set, it is equivalent with\nan empty instrumentation scope name (unknown)."
        },
        "logRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogRecord"
          },
          "description": "A list of log records."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to all logs in the \"logs\" field."
        }
      },
      "description": "A collection of Logs produced by a Scope."
    },
    "v1ScopeSpans": {
      "type": "object",
      "properties": {
        "scope": {
          "$ref": "#/definitions/v1InstrumentationScope",
          "description": "The instrumentation scope information for the spans in this message.\nSemantically when InstrumentationScope isn't set, it is equivalent with\nan empty instrumentation scope name (unknown)."
        },
        "spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Span"
          },
          "description": "A list of Spans that originate from an instrumentation scope."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to all spans and span events in the \"spans\" field."
        }
      },
      "description": "A collection of Spans produced by an InstrumentationScope."
    },
    "v1SeverityNumber": {
      "type": "string",
      "enum": [
        "SEVERITY_NUMBER_UNSPECIFIED",
        "SEVERITY_NUMBER_TRACE",
        "SEVERITY_NUMBER_TRACE2",
        "SEVERITY_NUMBER_TRACE3",
        "SEVERITY_NUMBER_TRACE4",
        "SEVERITY_NUMBER_DEBUG",
        "SEVERITY_NUMBER_DEBUG2",
        "SEVERITY_NUMBER_DEBUG3",
        "SEVERITY_NUMBER_DEBUG4",
        "SEVERITY_NUMBER_INFO",
        "SEVERITY_NUMBER_INFO2",
        "SEVERITY_NUMBER_INFO3",
        "SEVERITY_NUMBER_INFO4",
        "SEVERITY_NUMBER_WARN",
        "SEVERITY_NUMBER_WARN2",
        "SEVERITY_NUMBER_WARN3",
        "SEVERITY_NUMBER_WARN4",
        "SEVERITY_NUMBER_ERROR",
        "SEVERITY_NUMBER_ERROR2",
        "SEVERITY_NUMBER_ERROR3",
        "SEVERITY_NUMBER_ERROR4",
        "SEVERITY_NUMBER_FATAL",
        "SEVERITY_NUMBER_FATAL2",
        "SEVERITY_NUMBER_FATAL3",
        "SEVERITY_NUMBER_FATAL4"
      ],
      "default": "SEVERITY_NUMBER_UNSPECIFIED",
      "description": "Possible values for LogRecord.SeverityNumber.\n\n - SEVERITY_NUMBER_UNSPECIFIED: UNSPECIFIED is the default SeverityNumber, it MUST NOT be used."
    },
    "v1Span": {
      "type": "object",
      "properties": {
        "traceId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All spans from the same trace share\nthe same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\nis considered invalid.\n\nThis field is semantically required. Receiver should generate new\nrandom trace_id if empty or invalid trace_id was received.\n\nThis field is required."
        },
        "spanId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array. An ID with all zeroes is considered\ninvalid.\n\nThis field is semantically required. Receiver should generate new\nrandom span_id if empty or invalid span_id was received.\n\nThis field is required."
        },
        "traceState": {
          "type": "string",
          "description": "trace_state conveys information about request position in multiple distributed tracing graphs.\nIt is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\nSee also https://github.com/w3c/distributed-tracing for more details about this field."
        },
        "parentSpanId": {
          "type": "string",
          "format": "byte",
          "description": "The `span_id` of this span's parent span. If this is a root span, then this\nfield must be empty. The ID is an 8-byte array."
        },
        "name": {
          "type": "string",
          "description": "A description of the span's operation.\n\nFor example, the name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name at the same call point in an application.\nThis makes it easier to correlate spans in different traces.\n\nThis field is semantically required to be set to non-empty string.\nEmpty value is equivalent to an unknown span name.\n\nThis field is required."
        },
        "kind": {
          "$ref": "#/definitions/SpanSpanKind",
          "description": "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `CLIENT` (caller)\nand `SERVER` (callee) to identify queueing latency associated with the span."
        },
        "startTimeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "start_time_unix_nano is the start time of the span. On the client side, this is the time\nkept by the local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time."
        },
        "endTimeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "end_time_unix_nano is the end time of the span. On the client side, this is the time\nkept by the local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "\"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n    \"/http/server_latency\": 300\n    \"abc.com/myattribute\": true\n    \"abc.com/score\": 10.239\n\nThe OpenTelemetry API specification further restricts the allowed value types:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "title": "attributes is a collection of key/value pairs. Note, global attributes\nlike server name can be set using the resource API. Examples of attributes:"
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of attributes that were discarded. Attributes\ncan be discarded because their keys are too long or because there are too many\nattributes. If this value is 0, then no attributes were dropped."
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanEvent"
          },
          "description": "events is a collection of Event items."
        },
        "droppedEventsCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_events_count is the number of dropped events. If the value is 0, then no\nevents were dropped."
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanLink"
          },
          "description": "links is a collection of Links, which are references from this span to a span\nin the same or different trace."
        },
        "droppedLinksCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_links_count is the number of dropped links after the maximum size was\nenforced. If this value is 0, then no links were dropped."
        },
        "status": {
          "$ref": "#/definitions/tracev1Status",
          "description": "An optional final status for this span. Semantically when Status isn't set, it means\nspan's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0)."
        }
      },
      "description": "A Span represents a single operation performed by a single component of the system.\n\nThe next available field id is 17."
    },
    "v1TracesData": {
      "type": "object",
      "properties": {
        "resourceSpans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceSpans"
          },
          "description": "An array of ResourceSpans.\nFor data coming from a single resource this array will typically contain\none element. Intermediary nodes that receive data from multiple origins\ntypically batch the data before forwarding further and in that case this\narray will contain multiple elements."
        }
      },
      "description": "TracesData represents the traces data that can be stored in a persistent storage,\nOR can be embedded by other protocols that transfer OTLP traces data but do\nnot implement the OTLP protocol.\n\nThe main difference between this message and collector protocol is that\nin this message there will not be any \"control\" or \"metadata\" specific to\nOTLP protocol.\n\nWhen new fields are added into this message, the OTLP request MUST be updated\nas well."
    },
    "v1alpha1GetOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Operation"
          }
        }
      },
      "description": "Response object to get operation names."
    },
    "v1alpha1GetServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response object to get service names."
    },
    "v1alpha1Operation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "spanKind": {
          "type": "string"
        }
      },
      "description": "Operation encapsulates information about operation."
    },
    "v1alpha1TraceQueryParameters": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "operationName": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes are matched against Span and Resource attributes.\nAt least one span in a trace must match all specified attributes."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Span min start time in. REST API uses RFC-3339ns format. Required."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Span max start time. REST API uses RFC-3339ns format. Required."
        },
        "durationMin": {
          "type": "string",
          "description": "Span min duration. REST API uses Golang's time format e.g. 10s."
        },
        "durationMax": {
          "type": "string",
          "description": "Span max duration. REST API uses Golang's time format e.g. 10s."
        },
        "numTraces": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of traces in the response."
        }
      },
      "description": "Query parameters to find traces.\nNote that some storage implementations do not guarantee the correct implementation of all parameters."
    }
  }
}
